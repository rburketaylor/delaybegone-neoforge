plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.192'
}

// Multi-version support - load common + version-specific properties
def mcVersion = project.hasProperty('mcVersion') ? project.mcVersion : null

// If no mcVersion specified, auto-detect the latest version from versions folder
if (mcVersion == null) {
    def versionsDir = file("versions")
    def versionFiles = versionsDir.listFiles()?.findAll { 
        it.name.endsWith('.properties') && it.name != 'common.properties' 
    }
    
    if (versionFiles?.size() > 0) {
        // Sort versions naturally (e.g., 1.21.10 comes after 1.21.9)
        def versions = versionFiles.collect { it.name.replace('.properties', '') }
        versions.sort { a, b ->
            def aParts = a.split('\\.').collect { Integer.parseInt(it) }
            def bParts = b.split('\\.').collect { Integer.parseInt(it) }
            
            for (int i = 0; i < Math.max(aParts.size(), bParts.size()); i++) {
                def aVal = i < aParts.size() ? aParts[i] : 0
                def bVal = i < bParts.size() ? bParts[i] : 0
                if (aVal != bVal) return aVal <=> bVal
            }
            return 0
        }
        
        mcVersion = versions.last()
        println("No mcVersion specified, automatically using latest version: ${mcVersion}")
    }
}

// Load common properties first
def commonPropsFile = file("versions/common.properties")
if (commonPropsFile.exists()) {
    def commonProps = new Properties()
    commonPropsFile.withInputStream { commonProps.load(it) }
    commonProps.each { key, value ->
        if (!project.hasProperty(key)) {
            project.ext[key] = value
        }
    }
}

// Load version-specific properties (these override common ones)
if (mcVersion != null) {
    def versionPropsFile = file("versions/${mcVersion}.properties")
    if (versionPropsFile.exists()) {
        def versionProps = new Properties()
        versionPropsFile.withInputStream { versionProps.load(it) }
        versionProps.each { key, value ->
            project.ext[key] = value // Override any common properties
        }
        println("Building for Minecraft ${mcVersion} (using common + version-specific properties)")
        
        // Check if this version needs a different NeoGradle version
        if (project.ext.neogradle_version != '7.0.192') {
            throw new GradleException("This version requires NeoGradle ${project.ext.neogradle_version}, but build.gradle is configured for 7.0.192.\n" +
                                    "For now, only versions compatible with NeoGradle 7.0.192 are supported.\n" +
                                    "Incompatible version: ${mcVersion}")
        }
    } else {
        throw new GradleException("Version properties file not found: versions/${mcVersion}.properties\n" +
                                "Usage: ./gradlew build -PmcVersion=<version>")
    }
} else {
    if (mcVersion == null) {
        throw new GradleException("No Minecraft version specified and no version properties files found!\n" +
                                "Usage: ./gradlew build -PmcVersion=<version>")
    }
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    // Add here additional repositories if required by some of the dependencies below.
}

base {
    archivesName.set(mod_id)
}

// Mojang ships Java 21 to end users in 1.21.1, so mods should target Java 21.
java.toolchain.languageVersion.set(JavaLanguageVersion.of(21))

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

}


// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom(localRuntime)
}

dependencies {
    // Specify the version of Minecraft to use.
    // Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
    // The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
    // You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
    // And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
    // For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
    implementation "net.neoforged:neoforge:${neo_version}"

    // Example optional mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
    // We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
    // localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    def replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
    // Removed strict lint flags that cause NeoForge toolchain builds to fail
    // options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:removal', '-Xlint:unchecked'])
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// ================================================================================
// Multi-Version Build System
// ================================================================================

// Discover all available versions from the versions directory
def discoverVersions() {
    def versionsDir = file("versions")
    def versionFiles = versionsDir.listFiles()?.findAll { 
        it.name.endsWith('.properties') && it.name != 'common.properties' 
    }
    
    if (versionFiles?.size() > 0) {
        def versions = versionFiles.collect { it.name.replace('.properties', '') }
        versions.sort { a, b ->
            def aParts = a.split('\\.').collect { Integer.parseInt(it) }
            def bParts = b.split('\\.').collect { Integer.parseInt(it) }
            
            for (int i = 0; i < Math.max(aParts.size(), bParts.size()); i++) {
                def aVal = i < aParts.size() ? aParts[i] : 0
                def bVal = i < bParts.size() ? bParts[i] : 0
                if (aVal != bVal) return aVal <=> bVal
            }
            return 0
        }
        return versions
    }
    return []
}

// Format time duration in human-readable format
def formatDuration(long milliseconds) {
    long seconds = milliseconds / 1000
    if (seconds < 60) {
        return "${seconds}.${(milliseconds % 1000) / 100 as int}s"
    }
    long minutes = seconds / 60
    seconds = seconds % 60
    if (minutes < 60) {
        return "${minutes}m ${seconds}s"
    }
    long hours = minutes / 60
    minutes = minutes % 60
    return "${hours}h ${minutes}m ${seconds}s"
}

// Build all versions with specified gradle tasks
def buildAllVersionsTask(String taskName, List<String> gradleTasks, boolean withClean = false) {
    def versions = discoverVersions()
    if (versions.isEmpty()) {
        throw new GradleException("No version properties files found in versions/ directory!")
    }
    
    def totalStartTime = System.currentTimeMillis()
    def versionTimes = [:]
    def successfulVersions = []
    def failedVersions = [:]
    
    println "Building DelayBeGone for all supported versions..."
    println "Discovered ${versions.size()} versions: ${versions}"
    println ""
    
    // Multi-version builds use --no-daemon to prevent memory accumulation
    
    try {
        versions.eachWithIndex { version, index ->
            def versionStartTime = System.currentTimeMillis()
            
            println "========================================"
            println "Building ${index + 1}/${versions.size()}: Minecraft ${version}"
            println "========================================"
            
            try {
                // Clean build directory to avoid copying old artifacts
                project.delete(fileTree("build/libs") { include "*.jar" })
                
                // Use --no-daemon to prevent memory accumulation
                
                // Build the version
                def buildTasks = []
                if (withClean) {
                    buildTasks.add('clean')
                }
                buildTasks.addAll(gradleTasks)
                
                exec {
                    commandLine System.getProperty("os.name").toLowerCase().contains("windows") ? 'gradlew.bat' : './gradlew', *buildTasks, "-PmcVersion=${version}", "--project-cache-dir=build-cache/${version}", "--no-daemon"
                }
                
                // Move build artifacts
                def buildsDir = file("builds/${version}")
                buildsDir.mkdirs()
                copy {
                    from fileTree("build/libs") { include "*.jar" }
                    into buildsDir
                }
                
                def versionTime = System.currentTimeMillis() - versionStartTime
                versionTimes[version] = versionTime
                successfulVersions.add(version)
                
                println "✅ Successfully built ${version} (${formatDuration(versionTime)})"
                
            } catch (Exception e) {
                def versionTime = System.currentTimeMillis() - versionStartTime
                versionTimes[version] = versionTime
                failedVersions[version] = e.message
                
                println "❌ Build failed for ${version} (${formatDuration(versionTime)})"
                println "Reason: ${e.message}"
                throw new GradleException("Multi-version build failed at ${version}")
            }
        }
        
        // Success summary
        def totalTime = System.currentTimeMillis() - totalStartTime
        def avgTime = versionTimes.values().sum() / versionTimes.size()
        
        println ""
        println "========================================"
        println "✅ BUILD SUMMARY"
        println "========================================"
        println "All ${versions.size()} versions built successfully in ${formatDuration(totalTime)}"
        println ""
        println "Artifacts saved to:"
        versions.each { version ->
            def jarFiles = fileTree("builds/${version}") { include "*.jar" }
            jarFiles.each { jar ->
                println "- builds/${version}/ (${jar.name})"
            }
        }
        println ""
        println "Average build time: ${formatDuration(avgTime as long)} per version"
        println "========================================"
        
    } catch (Exception e) {
        // Failure summary
        def totalTime = System.currentTimeMillis() - totalStartTime
        
        println ""
        println "❌ BUILD FAILED"
        println "${successfulVersions.size()}/${versions.size()} versions succeeded, ${failedVersions.size()} failed (${formatDuration(totalTime)} total)"
        println ""
        if (successfulVersions.size() > 0) {
            println "✅ Successful: ${successfulVersions.join(', ')}"
        }
        if (failedVersions.size() > 0) {
            println "❌ Failed: ${failedVersions.keySet().join(', ')}"
        }
        throw e
    }
}

// Multi-version build tasks
tasks.register('buildAll') {
    description = 'Build all supported Minecraft versions (fast mode - jar only, no tests)'
    group = 'build'
    doLast {
        buildAllVersionsTask('buildAll', ['jar', '-x', 'test', '-x', 'javadoc'])
    }
}

tasks.register('buildAllFull') {
    description = 'Build all supported Minecraft versions (full mode - with tests and javadoc)'
    group = 'build'
    doLast {
        buildAllVersionsTask('buildAllFull', ['build'])
    }
}

tasks.register('cleanBuildAll') {
    description = 'Clean and build all supported Minecraft versions (fast mode)'
    group = 'build'
    doLast {
        buildAllVersionsTask('cleanBuildAll', ['jar', '-x', 'test', '-x', 'javadoc'], true)
    }
}

tasks.register('cleanBuildAllFull') {
    description = 'Clean and build all supported Minecraft versions (full mode)'
    group = 'build'
    doLast {
        buildAllVersionsTask('cleanBuildAllFull', ['build'], true)
    }
}

// Utility tasks
tasks.register('listVersions') {
    description = 'List all discovered Minecraft versions'
    group = 'help'
    doLast {
        def versions = discoverVersions()
        if (versions.isEmpty()) {
            println "No version properties files found in versions/ directory!"
        } else {
            println "Discovered ${versions.size()} supported versions:"
            versions.each { version ->
                println "- ${version}"
            }
        }
    }
}

tasks.register('cleanAllCaches') {
    description = 'Clean all version-specific build caches'
    group = 'build'
    doLast {
        def buildCacheDir = file('build-cache')
        if (buildCacheDir.exists()) {
            println "Cleaning all build caches..."
            delete buildCacheDir
            println "All build caches cleared."
        } else {
            println "No build caches found to clean."
        }
    }
}
